[
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "a045efaa-679b-421f-98da-db438de2753d",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC001-verify jwt token issuance and user info retrieval",
    "description": "Test the /api/auth/token GET endpoint to ensure it successfully issues a JWT token and returns correct user information for authenticated users, and returns 401 Unauthorized for unauthenticated requests.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\n\ndef test_verify_jwt_token_issuance_and_user_info_retrieval():\n    token_url = f\"{BASE_URL}/api/auth/token\"\n\n    # Test unauthenticated request: expect 401 Unauthorized as per PRD.\n    try:\n        response_unauth = requests.get(token_url, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed for token fetch: {e}\"\n    assert response_unauth.status_code == 401, f\"Expected 401 Unauthorized for unauthenticated token request, got {response_unauth.status_code}\"\n\n    # If valid_token is set, test authenticated request.\n    valid_token = None  # Replace None with actual token string if available.\n\n    if valid_token:\n        headers = {\"Authorization\": f\"Bearer {valid_token}\"}\n        try:\n            response_auth = requests.get(token_url, headers=headers, timeout=TIMEOUT)\n        except requests.RequestException as e:\n            assert False, f\"Request failed for authenticated token fetch: {e}\"\n        assert response_auth.status_code == 200, f\"Expected 200 OK for authenticated request, got {response_auth.status_code}\"\n        json_data = response_auth.json()\n        assert \"jwt\" in json_data and isinstance(json_data[\"jwt\"], str) and json_data[\"jwt\"], \"JWT token missing or invalid in response\"\n        assert \"user\" in json_data and isinstance(json_data[\"user\"], dict), \"User info missing or invalid in response\"\n        user = json_data[\"user\"]\n        assert all(k in user for k in (\"id\", \"email\", \"name\")), \"User info incomplete in response\"\n        assert isinstance(user[\"id\"], str) and user[\"id\"], \"User id invalid\"\n        assert isinstance(user[\"email\"], str) and user[\"email\"], \"User email invalid\"\n        assert isinstance(user[\"name\"], str) and user[\"name\"], \"User name invalid\"\n\n\ntest_verify_jwt_token_issuance_and_user_info_retrieval()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 37, in <module>\n  File \"<string>\", line 15, in test_verify_jwt_token_issuance_and_user_info_retrieval\nAssertionError: Expected 401 Unauthorized for unauthenticated token request, got 200\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.794Z",
    "modified": "2025-11-01T04:49:50.340Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "6636b962-b605-40d1-b84a-e22de99bc2a2",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC002-validate product creation with complete and valid data",
    "description": "Test the /api/products POST endpoint to create a new product with all required fields including company_id, product_name, hs_code, category, material, technical_specs, unit_price, currency, and description, and verify the product is created successfully.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\n# Assuming a function to get a valid JWT token for authentication\ndef get_jwt_token():\n    url = f\"{BASE_URL}/api/auth/token\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        assert response.headers.get('Content-Type','').startswith('application/json'), f\"Expected JSON response from auth token endpoint, got Content-Type: {response.headers.get('Content-Type')}\"\n        assert response.status_code == 200, f\"Failed to get token, status code: {response.status_code}\"\n        data = response.json()\n        assert 'jwt' in data, \"JWT token not found in response\"\n        return data.get(\"jwt\")\n    except Exception as e:\n        raise Exception(f\"Authentication failed: {e}\")\n\ndef test_validate_product_creation_with_complete_and_valid_data():\n    jwt_token = get_jwt_token()\n    headers = {\n        \"Authorization\": f\"Bearer {jwt_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Example company_id - need to obtain a valid one from user profile or create a new company\n    # Here we fetch user info from token response and assume user has company_id same as user id or fetch companies\n    # For test, we will try to fetch company info to get a valid company_id\n    company_id = None\n    try:\n        companies_resp = requests.get(f\"{BASE_URL}/api/companies\", headers=headers, timeout=TIMEOUT)\n        assert companies_resp.status_code == 200, f\"Expected 200 on companies list, got {companies_resp.status_code}\"\n        companies_data = companies_resp.json()\n        if isinstance(companies_data, list) and len(companies_data) > 0:\n            company_id = companies_data[0].get(\"id\") or companies_data[0].get(\"company_id\") or companies_data[0].get(\"id\")\n        else:\n            # fallback: try to get from user profile\n            profile_resp = requests.get(f\"{BASE_URL}/api/profile\", headers=headers, timeout=TIMEOUT)\n            assert profile_resp.status_code == 200, f\"Expected 200 on user profile, got {profile_resp.status_code}\"\n            profile_data = profile_resp.json()\n            # Often company id is not directly in profile, this is a fallback just in case\n            company_id = profile_data.get(\"company_id\") or profile_data.get(\"id\")\n        assert company_id is not None, \"No company_id found for creating product\"\n    except Exception as e:\n        raise Exception(f\"Failed to get company_id for test: {e}\")\n\n    # Prepare product data with all required fields\n    product_payload = {\n        \"company_id\": str(company_id),\n        \"product_name\": f\"Test Product {uuid.uuid4()}\",\n        \"hs_code\": \"84713000\",\n        \"category\": \"Electronics\",\n        \"material\": \"Plastic and Metal\",\n        \"technical_specs\": \"Specs details here\",\n        \"unit_price\": 199.99,\n        \"currency\": \"USD\",\n        \"description\": \"This is a test product created during automated testing.\"\n    }\n\n    product_id = None\n    try:\n        url = f\"{BASE_URL}/api/products\"\n        response = requests.post(url, json=product_payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 response for product creation, got {response.status_code}\"\n        resp_json = response.json()\n        # Confirm response contains confirmation or product id info (not specified, so checking keys)\n        # If no explicit id returned, skip extraction\n        product_id = resp_json.get(\"id\") or resp_json.get(\"product_id\")\n\n        # Additional validation - if response just a success message as per PRD, validate keys exist \n        # Try to fetch product list of this company and check new product present\n        get_products_resp = requests.get(f\"{BASE_URL}/api/products\", headers=headers, params={\"company_id\": company_id}, timeout=TIMEOUT)\n        assert get_products_resp.status_code == 200, f\"Expected 200 fetching products, got {get_products_resp.status_code}\"\n        products_list = get_products_resp.json().get(\"products\", [])\n        created_product = None\n        # Match by unique product_name since we generated uuid in product_name\n        for p in products_list:\n            if p.get(\"product_name\") == product_payload[\"product_name\"]:\n                created_product = p\n                break\n        assert created_product is not None, \"Created product not found in product list after creation\"\n        # Validate all fields match\n        assert created_product.get(\"company_id\") == product_payload[\"company_id\"]\n        assert created_product.get(\"hs_code\") == product_payload[\"hs_code\"]\n        assert created_product.get(\"category\") == product_payload[\"category\"]\n        assert created_product.get(\"material\") == product_payload[\"material\"]\n        assert created_product.get(\"technical_specs\") == product_payload[\"technical_specs\"]\n        assert float(created_product.get(\"unit_price\", 0)) == product_payload[\"unit_price\"]\n        assert created_product.get(\"currency\") == product_payload[\"currency\"]\n        assert created_product.get(\"description\") == product_payload[\"description\"]\n    finally:\n        # Cleanup: delete the created product if product_id is known\n        if product_id:\n            try:\n                del_resp = requests.delete(f\"{BASE_URL}/api/products/{product_id}\", headers=headers, timeout=TIMEOUT)\n                # 200 or 204 expected\n                assert del_resp.status_code in [200, 204], f\"Failed to delete product with id {product_id}, status: {del_resp.status_code}\"\n            except Exception:\n                # ignore cleanup errors but can be logged if needed\n                pass\n\ntest_validate_product_creation_with_complete_and_valid_data()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 12, in get_jwt_token\nAssertionError: Expected JSON response from auth token endpoint, got Content-Type: text/html\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 103, in <module>\n  File \"<string>\", line 21, in test_validate_product_creation_with_complete_and_valid_data\n  File \"<string>\", line 18, in get_jwt_token\nException: Authentication failed: Expected JSON response from auth token endpoint, got Content-Type: text/html\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.816Z",
    "modified": "2025-11-01T04:49:52.565Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "475e87ea-ccb8-4d25-8425-49eec0f8efe2",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC003-fetch products by valid company id",
    "description": "Test the /api/products GET endpoint with a valid company_id query parameter to retrieve the list of products associated with that company, and verify the response contains the products array.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_fetch_products_by_valid_company_id():\n    # Step 1: Authenticate to get JWT token\n    auth_url = f\"{BASE_URL}/api/auth/token\"\n    headers = {\"Accept\": \"application/json\"}\n    try:\n        auth_resp = requests.get(auth_url, headers=headers, timeout=TIMEOUT)\n        assert auth_resp.status_code == 200, f\"Authentication failed with status code {auth_resp.status_code}\"\n        ct = auth_resp.headers.get('Content-Type', '')\n        assert 'application/json' in ct, \"Authentication response is not JSON\"\n        auth_data = auth_resp.json()\n        jwt_token = auth_data.get(\"jwt\")\n        user = auth_data.get(\"user\")\n        assert jwt_token and user, \"Authentication response missing token or user info\"\n    except requests.RequestException as e:\n        assert False, f\"Authentication request failed: {e}\"\n    except ValueError as e:\n        assert False, f\"Authentication response is not valid JSON: {e}\"\n\n    # Prepare headers with Authorization\n    headers[\"Authorization\"] = f\"Bearer {jwt_token}\"\n    headers[\"Accept\"] = \"application/json\"\n\n    # Use company_id from authenticated user info if available, else fail test\n    # The PRD does not explicitly mention the company id in auth user, so we must try to get a valid company_id\n    # For this test, try to fetch companies and use one of their IDs\n    try:\n        companies_resp = requests.get(f\"{BASE_URL}/api/companies\", headers=headers, timeout=TIMEOUT)\n        assert companies_resp.status_code == 200, f\"Fetching companies failed with status code {companies_resp.status_code}\"\n        ct = companies_resp.headers.get('Content-Type', '')\n        assert 'application/json' in ct, \"Companies response is not JSON\"\n        companies_data = companies_resp.json()\n        company_id = None\n        if isinstance(companies_data, list) and len(companies_data) > 0:\n            if isinstance(companies_data[0], dict) and \"id\" in companies_data[0]:\n                company_id = companies_data[0][\"id\"]\n        elif isinstance(companies_data, dict):\n            if \"companies\" in companies_data and isinstance(companies_data[\"companies\"], list) and len(companies_data[\"companies\"]) > 0:\n                company_id = companies_data[\"companies\"][0].get(\"id\")\n            elif \"id\" in companies_data:\n                company_id = companies_data[\"id\"]\n        assert company_id, \"No company_id found from /api/companies to test products retrieval\"\n    except requests.RequestException as e:\n        assert False, f\"Request to fetch companies failed: {e}\"\n    except ValueError as e:\n        assert False, f\"Companies response is not valid JSON: {e}\"\n\n    # Step 2: Request products by valid company_id\n    products_url = f\"{BASE_URL}/api/products\"\n    params = {\"company_id\": company_id}\n\n    try:\n        products_resp = requests.get(products_url, headers=headers, params=params, timeout=TIMEOUT)\n        assert products_resp.status_code == 200, f\"Products fetch failed with status code {products_resp.status_code}\"\n        ct = products_resp.headers.get('Content-Type', '')\n        assert 'application/json' in ct, \"Products response is not JSON\"\n        products_data = products_resp.json()\n        assert \"products\" in products_data, \"Response JSON does not contain 'products' key\"\n        assert isinstance(products_data[\"products\"], list), \"'products' key is not a list\"\n    except requests.RequestException as e:\n        assert False, f\"Request to fetch products failed: {e}\"\n    except ValueError as e:\n        assert False, f\"Products response is not valid JSON: {e}\"\n\ntest_fetch_products_by_valid_company_id()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 69, in <module>\n  File \"<string>\", line 12, in test_fetch_products_by_valid_company_id\nAssertionError: Authentication failed with status code 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.822Z",
    "modified": "2025-11-01T04:49:59.033Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "eed79170-947f-4fb4-9b66-bd4a20976bd2",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC004-retrieve ai predictions with valid parameters",
    "description": "Test the /api/ai-predictions GET endpoint by providing valid company_id, type (market_forecast, price_trend, demand_prediction), and period parameters, and verify the response returns the expected AI prediction data.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_retrieve_ai_predictions_with_valid_parameters():\n    # Authenticate to get JWT token\n    auth_url = f\"{BASE_URL}/api/auth/token\"\n    try:\n        auth_response = requests.get(auth_url, timeout=TIMEOUT)\n        assert auth_response.status_code == 200, f\"Auth failed with status {auth_response.status_code}\"\n        auth_data = auth_response.json()\n        jwt_token = auth_data.get(\"jwt\")\n        user = auth_data.get(\"user\")\n        assert jwt_token is not None, \"JWT token missing in auth response\"\n        assert user is not None and \"id\" in user, \"User info missing or incomplete in auth response\"\n    except (requests.RequestException, AssertionError) as e:\n        raise Exception(f\"Authentication failed: {e}\")\n\n    headers = {\n        \"Authorization\": f\"Bearer {jwt_token}\"\n    }\n\n    company_id = user[\"id\"]\n    periods_to_test = [\"Q1-2025\", \"2025\"]  # sample periods for testing\n\n    prediction_types = [\n        \"market_forecast\",\n        \"price_trend\",\n        \"demand_prediction\"\n    ]\n\n    for prediction_type in prediction_types:\n        for period in periods_to_test:\n            params = {\n                \"company_id\": company_id,\n                \"type\": prediction_type,\n                \"period\": period\n            }\n            try:\n                response = requests.get(f\"{BASE_URL}/api/ai-predictions\", headers=headers, params=params, timeout=TIMEOUT)\n                assert response.status_code == 200, f\"Expected 200, got {response.status_code} for type {prediction_type} and period {period}\"\n                data = response.json()\n                # Validate response content structure and presence of relevant keys (assuming response contains prediction data)\n                assert isinstance(data, dict), \"Response JSON is not an object\"\n                # The exact keys aren't specified, but expecting some predictive data in response\n                # Check at least contains fields matching prediction_type or 'prediction' key\n                # Since no schema details given, check presence of keys logically\n                assert data, f\"Response data is empty for type {prediction_type} and period {period}\"\n            except (requests.RequestException, AssertionError) as e:\n                raise Exception(f\"Failed for prediction_type={prediction_type}, period={period} with error: {e}\")\n\ntest_retrieve_ai_predictions_with_valid_parameters()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/requests/models.py\", line 974, in json\n    return complexjson.loads(self.text, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/__init__.py\", line 514, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 386, in decode\n    obj, end = self.raw_decode(s)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 416, in raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsimplejson.errors.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 12, in test_retrieve_ai_predictions_with_valid_parameters\n  File \"/var/task/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 18, in test_retrieve_ai_predictions_with_valid_parameters\nException: Authentication failed: Expecting value: line 2 column 1 (char 1)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.844Z",
    "modified": "2025-11-01T04:49:30.200Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "5e9bf84c-89f4-46a8-8c58-8e55a682b483",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC005-create ai prediction with required fields",
    "description": "Test the /api/ai-predictions POST endpoint to create a new AI prediction by providing required fields company_id, prediction_type, and period, along with optional fields, and verify the prediction is created successfully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_create_ai_prediction_with_required_fields():\n    # Step 1: Authenticate and get JWT token\n    auth_url = f\"{BASE_URL}/api/auth/token\"\n    try:\n        auth_resp = requests.get(auth_url, timeout=TIMEOUT)\n        assert auth_resp.status_code == 200, f\"Authentication failed with status {auth_resp.status_code}\"\n        if not auth_resp.content:\n            raise AssertionError(\"Authentication response is empty\")\n        try:\n            auth_data = auth_resp.json()\n        except Exception as e:\n            raise AssertionError(f\"Authentication response is not valid JSON: {e}\")\n        token = auth_data.get(\"jwt\")\n        user = auth_data.get(\"user\")\n        assert token and isinstance(token, str), \"JWT token is missing or invalid\"\n        assert user and \"id\" in user, \"User info is missing or invalid\"\n    except Exception as e:\n        raise AssertionError(f\"Authentication step failed: {e}\")\n\n    # Prepare headers with Authorization\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # We need a valid company_id. We can get it from user info or fetch companies if available.\n    # Since user info does not have company_id explicitly, try to get company list first:\n    company_id = None\n    try:\n        companies_resp = requests.get(f\"{BASE_URL}/api/companies\", headers=headers, timeout=TIMEOUT)\n        assert companies_resp.status_code == 200, f\"Failed to fetch companies with status {companies_resp.status_code}\"\n        if not companies_resp.content:\n            raise AssertionError(\"Companies response is empty\")\n        try:\n            companies_data = companies_resp.json()\n        except Exception as e:\n            raise AssertionError(f\"Companies response is not valid JSON: {e}\")\n\n        # Assuming companies_data is a list or dict with company info - pick first company id if possible\n        if isinstance(companies_data, list) and companies_data:\n            company_id = companies_data[0].get(\"id\")\n        elif isinstance(companies_data, dict):\n            # Try common keys\n            if \"companies\" in companies_data and isinstance(companies_data[\"companies\"], list) and companies_data[\"companies\"]:\n                company_id = companies_data[\"companies\"][0].get(\"id\")\n            elif \"id\" in companies_data:\n                company_id = companies_data.get(\"id\")\n        assert company_id and isinstance(company_id, str), \"Valid company_id not found in companies response\"\n    except Exception as e:\n        raise AssertionError(f\"Fetching company_id failed: {e}\")\n\n    # Prepare AI prediction payload with required fields plus some optional fields\n    payload = {\n        \"company_id\": company_id,\n        \"prediction_type\": \"market_forecast\",\n        \"period\": \"2025-Q4\",\n        \"target_market\": \"North America\",\n        \"product_category\": \"Electronics\",\n        \"hs_code\": \"854239\",\n        \"market_data\": {\n            \"previous_prices\": [100, 105, 110],\n            \"market_conditions\": \"stable\"\n        }\n    }\n\n    ai_prediction_url = f\"{BASE_URL}/api/ai-predictions\"\n\n    # POST the AI prediction and validate success\n    try:\n        response = requests.post(ai_prediction_url, json=payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"AI prediction creation failed with status {response.status_code}\"\n        if response.content:\n            try:\n                resp_json = response.json()\n            except Exception as e:\n                raise AssertionError(f\"Response JSON decode failed: {e}\")\n        else:\n            resp_json = {}\n        assert isinstance(resp_json, dict), \"Response JSON is not a dictionary\"\n        # Check the company_id and prediction_type match in the response if present\n        if \"company_id\" in resp_json:\n            assert resp_json[\"company_id\"] == company_id, \"Returned company_id does not match\"\n        if \"prediction_type\" in resp_json:\n            assert resp_json[\"prediction_type\"] == \"market_forecast\", \"Returned prediction_type does not match\"\n    except Exception as e:\n        raise AssertionError(f\"Failed to create AI prediction: {e}\")\n\ntest_create_ai_prediction_with_required_fields()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/requests/models.py\", line 974, in json\n    return complexjson.loads(self.text, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/__init__.py\", line 514, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 386, in decode\n    obj, end = self.raw_decode(s)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 416, in raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsimplejson.errors.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 15, in test_create_ai_prediction_with_required_fields\n  File \"/var/task/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 17, in test_create_ai_prediction_with_required_fields\nAssertionError: Authentication response is not valid JSON: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 93, in <module>\n  File \"<string>\", line 23, in test_create_ai_prediction_with_required_fields\nAssertionError: Authentication step failed: Authentication response is not valid JSON: Expecting value: line 2 column 1 (char 1)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.849Z",
    "modified": "2025-11-01T04:49:53.059Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "88a9f641-ca6e-4d68-b389-06ea56b30736",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC006-get market reports for a company",
    "description": "Test the /api/market-reports GET endpoint with a valid company_id query parameter to retrieve market reports and verify the response contains relevant trade statistics and market insights.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef get_jwt_token():\n    url = f\"{BASE_URL}/api/auth/token\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        if response.status_code == 200:\n            try:\n                data = response.json()\n            except ValueError:\n                assert False, \"Response content is not valid JSON\"\n\n            token = data.get(\"jwt\")\n            user = data.get(\"user\")\n            assert isinstance(token, str) and token, \"JWT token is missing or empty\"\n            assert isinstance(user, dict) and \"id\" in user, \"User info is missing or invalid\"\n            return token, user\n        elif response.status_code == 401:\n            raise PermissionError(\"Unauthorized: Invalid credentials or no credentials provided\")\n        else:\n            response.raise_for_status()\n    except (requests.RequestException, AssertionError, PermissionError) as e:\n        raise RuntimeError(f\"Failed to obtain JWT token: {e}\")\n\ndef test_get_market_reports_for_company():\n    token, user = get_jwt_token()\n    company_id = user.get(\"id\")\n    assert company_id, \"Company ID (user id) is required for the test\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Accept\": \"application/json\"\n    }\n    params = {\"company_id\": company_id}\n    url = f\"{BASE_URL}/api/market-reports\"\n\n    try:\n        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n        try:\n            data = response.json()\n        except ValueError:\n            assert False, \"Market reports response content is not valid JSON\"\n\n        assert isinstance(data, dict), \"Response should be a JSON object\"\n        keys = data.keys()\n        assert any(\n            key in keys for key in [\"trade_statistics\", \"market_insights\", \"reports\", \"analytics\"]\n        ) or len(keys) > 0, \"Response does not contain expected market report data\"\n    except requests.Timeout:\n        assert False, \"Request timed out\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_market_reports_for_company()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/requests/models.py\", line 974, in json\n    return complexjson.loads(self.text, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/__init__.py\", line 514, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 386, in decode\n    obj, end = self.raw_decode(s)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 416, in raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsimplejson.errors.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 12, in get_jwt_token\n  File \"/var/task/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 14, in get_jwt_token\nAssertionError: Response content is not valid JSON\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 58, in <module>\n  File \"<string>\", line 29, in test_get_market_reports_for_company\n  File \"<string>\", line 26, in get_jwt_token\nRuntimeError: Failed to obtain JWT token: Response content is not valid JSON\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.854Z",
    "modified": "2025-11-01T04:49:40.578Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "0c243592-b758-439c-a9ca-c0747a23ffe5",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC007-fetch target markets successfully",
    "description": "Test the /api/target-markets GET endpoint to retrieve the list of target markets and verify the response returns success with the expected data.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef get_jwt_token():\n    url = f\"{BASE_URL}/api/auth/token\"\n    try:\n        response = requests.get(url, timeout=TIMEOUT)\n        if response.status_code == 200:\n            data = response.json()\n            jwt = data.get(\"jwt\")\n            assert jwt is not None and isinstance(jwt, str), \"JWT token missing or invalid\"\n            return jwt\n        elif response.status_code == 401:\n            raise Exception(\"Unauthorized: Invalid or missing authentication\")\n        else:\n            response.raise_for_status()\n    except requests.RequestException as e:\n        raise Exception(f\"Failed to get JWT token: {e}\")\n\ndef test_fetch_target_markets_successfully():\n    token = get_jwt_token()\n    url = f\"{BASE_URL}/api/target-markets\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 OK but got {response.status_code}\"\n        data = response.json()\n        # The PRD does not specify exact schema for target markets, \n        # but we assert data is a list or dict containing markets info.\n        assert isinstance(data, (list, dict)), \"Response data should be a list or dict\"\n        # If list, ensure elements are dicts representing target market info\n        if isinstance(data, list):\n            for item in data:\n                assert isinstance(item, dict), \"Each target market item should be a dict\"\n        else:\n            # If dict, check it has keys (not empty)\n            assert len(data) > 0, \"Target markets data dict should not be empty\"\n    except requests.RequestException as e:\n        raise Exception(f\"Request to fetch target markets failed: {e}\")\n\ntest_fetch_target_markets_successfully()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/requests/models.py\", line 974, in json\n    return complexjson.loads(self.text, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/__init__.py\", line 514, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 386, in decode\n    obj, end = self.raw_decode(s)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 416, in raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsimplejson.errors.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 11, in get_jwt_token\n  File \"/var/task/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 46, in <module>\n  File \"<string>\", line 23, in test_fetch_target_markets_successfully\n  File \"<string>\", line 20, in get_jwt_token\nException: Failed to get JWT token: Expecting value: line 2 column 1 (char 1)\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.861Z",
    "modified": "2025-11-01T04:49:35.865Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "fb769753-e4c8-43c1-9113-5638c8d1f975",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC008-retrieve risk assessments",
    "description": "Test the /api/risk-assessment GET endpoint to fetch trade risk analysis and assessment data and verify the response is successful and contains the expected information.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_retrieve_risk_assessments():\n    url = f\"{BASE_URL}/api/risk-assessment\"\n    headers = {\n        \"Accept\": \"application/json\",\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        # Assert status code 200 OK\n        assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n        data = response.json()\n        # Validate response content is a dict and contains expected keys for risk assessment\n        assert isinstance(data, dict), \"Response JSON is not an object\"\n        # Because no exact schema provided for risk assessment data,\n        # check that data is not empty and has some keys\n        assert data, \"Risk assessment response JSON is empty\"\n    except requests.RequestException as e:\n        assert False, f\"Request to get risk assessments failed: {str(e)}\"\n\ntest_retrieve_risk_assessments()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 14, in test_retrieve_risk_assessments\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.869Z",
    "modified": "2025-11-01T04:49:38.969Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "520ee8ec-41ea-454b-9ae6-c995979619c6",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC009-get price optimization recommendations",
    "description": "Test the /api/price-optimization GET endpoint to retrieve pricing strategy optimization recommendations for export markets and verify the response returns success with relevant data.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef get_jwt_token():\n    # Return a placeholder JWT token for testing purposes\n    # In real scenario, implement login to get token\n    return \"test-placeholder-jwt-token\"\n\ndef test_get_price_optimization_recommendations():\n    token = get_jwt_token()\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    url = f\"{BASE_URL}/api/price-optimization\"\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to /api/price-optimization failed: {e}\"\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Check that response contains relevant data for recommendations\n    assert isinstance(data, dict), \"Response JSON is not an object\"\n    assert len(data) > 0, \"Response JSON is empty, expected price optimization recommendation data\"\n\ntest_get_price_optimization_recommendations()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/requests/models.py\", line 974, in json\n    return complexjson.loads(self.text, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/__init__.py\", line 514, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 386, in decode\n    obj, end = self.raw_decode(s)\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/site-packages/simplejson/decoder.py\", line 416, in raw_decode\n    return self.scan_once(s, idx=_w(s, idx).end())\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nsimplejson.errors.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"<string>\", line 23, in test_get_price_optimization_recommendations\n  File \"/var/task/requests/models.py\", line 978, in json\n    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nrequests.exceptions.JSONDecodeError: Expecting value: line 2 column 1 (char 1)\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 25, in test_get_price_optimization_recommendations\nAssertionError: Response is not valid JSON\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.884Z",
    "modified": "2025-11-01T04:49:53.732Z"
  },
  {
    "projectId": "bb244afe-ce6a-404c-9303-7083bce9db39",
    "testId": "5cf7659f-5716-482f-9b6a-657cb5cceeea",
    "userId": "14f8f418-5071-70f4-0657-35c5de983afd",
    "title": "TC010-fetch market trends data",
    "description": "Test the /api/trend-detection GET endpoint to retrieve market trend identification and analysis data and verify the response returns success with the expected trend information.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_fetch_market_trends_data():\n    url = f\"{BASE_URL}/api/trend-detection\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        # Check HTTP status code 200\n        assert response.status_code == 200, f\"Expected status 200, got {response.status_code}\"\n        # Validate JSON response content\n        data = response.json()\n        assert isinstance(data, dict), \"Response should be a JSON object\"\n        # Assuming trend data exists in response, check keys and expected structure\n        # Since PRD does not specify exact keys, check presence of some data\n        assert data, \"Response JSON object should not be empty\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_fetch_market_trends_data()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 14, in test_fetch_market_trends_data\nAssertionError: Expected status 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-11-01T04:49:01.889Z",
    "modified": "2025-11-01T04:49:43.401Z"
  }
]
